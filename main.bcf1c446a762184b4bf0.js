/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./css/custom.css":
/*!************************!*\
  !*** ./css/custom.css ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jc3MvY3VzdG9tLmNzcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZXRyaWMtbWVsZC8uL2Nzcy9jdXN0b20uY3NzPzBkM2EiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./css/custom.css\n");

/***/ }),

/***/ "./src/compositions.ts":
/*!*****************************!*\
  !*** ./src/compositions.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base: () => (/* binding */ base),\n/* harmony export */   baseUnits: () => (/* binding */ baseUnits),\n/* harmony export */   compositions: () => (/* binding */ compositions)\n/* harmony export */ });\nconst base = {\n    factors: {\n        second: 0,\n        meter: 0,\n        kilogram: 0,\n        ampere: 0,\n        kelvin: 0,\n        mole: 0,\n        candela: 0,\n        factor: 0,\n    },\n    name: \"base\",\n    symbol: \"1\",\n};\nconst baseUnits = [\n    { factors: { second: 1 }, name: \"second\", symbol: \"s\", isBase: true, quantity: \"time\" },\n    { factors: { meter: 1 }, name: \"meter\", symbol: \"m\", quantity: \"length\", isBase: true },\n    { factors: { kilogram: 1 }, name: \"kilogram\", symbol: \"kg\", isBase: true, quantity: \"mass\" },\n    { factors: { ampere: 1 }, name: \"ampere\", symbol: \"A\", isBase: true, quantity: \"electric current\" },\n    { factors: { kelvin: 1 }, name: \"Kelvin\", symbol: \"K\", isBase: true, quantity: \"temperature\" },\n    { factors: { mole: 1 }, name: \"mole\", symbol: \"mol\", isBase: true, quantity: \"amount of substance\" },\n    { factors: { candela: 1 }, name: \"candela\", symbol: \"can\", isBase: true, quantity: \"luminous intensity\" },\n    { factors: { factor: 10 }, name: \"deca\", symbol: \"\\\\cdot 10\", isBase: true },\n];\nconst compositions = [\n    { factors: { meter: 2 }, name: \"square meter\", symbol: \"m^2\", quantity: \"area\" },\n    { factors: { second: -1 }, name: \"hertz\", symbol: \"Hz\", quantity: \"frequency\", specialNamed: true },\n    { factors: { meter: 1, second: -1 }, name: \"meters per second\", symbol: \"\\\\frac{m}{s}\", quantity: \"velocity\" },\n    { factors: { meter: 1, second: -2 }, name: \"meters per second squared\", symbol: \"\\\\frac{m}{s^2}\", quantity: \"acceleration\" },\n    {\n        factors: { second: -2, kilogram: 1, meter: 1 },\n        name: \"newton\",\n        symbol: \"N\",\n        quantity: \"force\", specialNamed: true\n    },\n    {\n        factors: { kilogram: 1, meter: 2, second: -2 },\n        name: \"joule\",\n        symbol: \"J\",\n        quantity: \"work/energy\", specialNamed: true\n    },\n    {\n        factors: { kilogram: 1, meter: 2, second: -3 },\n        name: \"watt\",\n        symbol: \"W\",\n        quantity: \"power\", specialNamed: true\n    },\n    {\n        factors: { second: -2, kilogram: 1, meter: -1 },\n        name: \"pascal\",\n        symbol: \"Pa\",\n        quantity: \"pressure\", specialNamed: true\n    },\n    { factors: { second: 1, ampere: 1 },\n        name: \"coulomb\",\n        symbol: \"C\",\n        quantity: \"electric charge\", specialNamed: true\n    },\n    {\n        factors: { kilogram: 1, meter: 2, second: -3, ampere: -1 },\n        name: \"volt\",\n        symbol: \"V\",\n        quantity: \"voltage\", specialNamed: true\n    },\n    {\n        factors: { kilogram: -1, meter: -2, second: 4, ampere: 2 },\n        name: \"farad\",\n        symbol: \"F\",\n        quantity: \"electrical capacitance\", specialNamed: true\n    },\n    {\n        factors: { kilogram: 1, meter: 2, second: -3, ampere: -2 },\n        name: \"ohm\",\n        symbol: \"Î©\",\n        quantity: \"electrical resistance\", specialNamed: true\n    },\n    {\n        factors: { kilogram: -1, meter: -2, second: 3, ampere: 2 },\n        name: \"siemens\",\n        symbol: \"S\",\n        quantity: \"electrical conductance\", specialNamed: true\n    },\n    {\n        factors: { kilogram: 1, meter: 2, second: -2, ampere: -1 },\n        name: \"weber\",\n        symbol: \"Wb\",\n        quantity: \"magnetic flux\", specialNamed: true\n    },\n    {\n        factors: { kilogram: 1, second: -2, ampere: -1 },\n        name: \"tesla\",\n        symbol: \"T\",\n        quantity: \"magnetic induction\", specialNamed: true\n    },\n    {\n        factors: { kilogram: 1, meter: 2, second: -2, ampere: -2 },\n        name: \"henry\",\n        symbol: \"H\",\n        quantity: \"electrical inductance\", specialNamed: true\n    },\n    {\n        factors: { mole: 1, second: -1 }, name: \"katal\", symbol: \"kat\",\n        quantity: \"catalytic activity\", specialNamed: true\n    },\n    {\n        factors: { candela: 1, meter: -2 }, name: \"lux\", symbol: \"lx\",\n        quantity: \"illuminance\", specialNamed: true\n    },\n    // List from https://en.wikipedia.org/wiki/SI_derived_unit#By_field_of_application (area, velocity and acceleration moved up for better gameplay)\n    { factors: { meter: 1, second: -3 }, name: \"meters per second cubed\", symbol: \"\\\\frac{m}{s^3}\", quantity: \"jerk\" },\n    { factors: { meter: 1, second: -4 }, name: \"meters per second to the fourth\", symbol: \"\\\\frac{m}{s^4}\", quantity: \"snap\" },\n    { factors: { second: -2 }, name: \"hertz per second\", symbol: \"Hz/s\", quantity: \"frequency drift\" },\n    { factors: { meter: 3, second: -1 }, name: \"cubic meter per second\", symbol: \"\\\\frac{m^3}{s}\", quantity: \"volumetric flow\" },\n    { factors: { meter: 3 }, name: \"cubic meter\", symbol: \"m^3\", quantity: \"volume\" },\n    { factors: { meter: 1, second: -1, kilogram: 1 }, name: \"newton-second\", symbol: \"N\\\\cdot s\", quantity: \"momentum\" },\n    { factors: { meter: 2, second: -1, kilogram: 1 }, name: \"newton-meter second\", symbol: \"N\\\\cdot m\\\\cdot s\", quantity: \"angular momentum\" },\n    { factors: { meter: 2, kilogram: 1, second: -2 }, name: \"newton-meter\", symbol: \"N\\\\cdot m\", quantity: \"torque\" },\n    { factors: { meter: 1, kilogram: 1, second: -3 }, name: \"newton per second\", symbol: \"\\\\frac{N}{s}\", quantity: \"yank\" },\n    { factors: { meter: -1 }, name: \"reciprocal meter\", symbol: \"m^{-1}\", quantity: \"wavenumber\" },\n    { factors: { meter: -2, kilogram: 1 }, name: \"kilogram per square meter\", symbol: \"\\\\frac{kg}{m^2}\", quantity: \"area density\" },\n    { factors: { meter: -3, kilogram: 1 }, name: \"kilogram per cubic meter\", symbol: \"\\\\frac{kg}{m^3}\", quantity: \"density\" },\n    { factors: { meter: 3, kilogram: -1 }, name: \"cubic meter per kilogram\", symbol: \"\\\\frac{m^3}{kg}\", quantity: \"specific volume\" },\n    { factors: { meter: 2, kilogram: 1, second: -1 }, name: \"joule-second\", symbol: \"J\\\\cdot s\", quantity: \"action\" },\n    { factors: { meter: 2, kilogram: -1, second: -2 }, name: \"joule per kilogram\", symbol: \"\\\\frac{J}{kg}\", quantity: \"specific energy\" },\n    { factors: { meter: -1, kilogram: 1, second: -2 }, name: \"joule per cubic meter\", symbol: \"\\\\frac{J}{m^3}\", quantity: \"energy density\" },\n    { factors: { meter: -1, kilogram: 1, second: -2 }, name: \"newton per meter\", symbol: \"\\\\frac{N}{m}\", quantity: \"surface tension\" },\n    { factors: { meter: -2, kilogram: 1, second: -3 }, name: \"watt per square meter\", symbol: \"\\\\frac{W}{m^2}\", quantity: \"heat flux density\" },\n    { factors: { meter: 2, second: -1 }, name: \"square meter per second\", symbol: \"\\\\frac{m^2}{s}\", quantity: \"kinematic viscosity\" },\n    { factors: { meter: -1, kilogram: 1, second: -1 }, name: \"pascal-second\", symbol: \"Pa\\\\cdot s\", quantity: \"dynamic viscosity\" },\n    { factors: { meter: -1, kilogram: 1 }, name: \"kilogram per meter\", symbol: \"\\\\frac{kg}{m}\", quantity: \"linear mass density\" },\n    { factors: { kilogram: 1, second: -1 }, name: \"kilogram per second\", symbol: \"\\\\frac{kg}{s}\", quantity: \"mass flow rate\" },\n    { factors: { meter: 1, kilogram: 1, second: -3 }, name: \"watt per meter\", symbol: \"\\\\frac{W}{m}\", quantity: \"spectral power\" },\n    { factors: { meter: 2, second: -3 }, name: \"gray per second\", symbol: \"\\\\frac{Gy}{s}\", quantity: \"absorbed dose rate\" },\n    // { factors: { meter: -2 }, name: \"meter per cubic meter\", symbol: \"\\\\frac{m}{m^3}\", quantity: \"fuel efficiency\" }, // skip since it can be confusing\n    { factors: { meter: -1, kilogram: 1, second: -3 }, name: \"watt per cubic meter\", symbol: \"\\\\frac{W}{m^3}\", quantity: \"spectral irradiance\" },\n    { factors: { meter: -2, kilogram: 1, second: -3 }, name: \"joule per square meter second\", symbol: \"\\\\frac{J}{m^2\\\\cdot s}\", quantity: \"energy flux density\" },\n    { factors: { meter: 1, kilogram: -1, second: 2 }, name: \"reciprocal pascal\", symbol: \"\\\\frac{1}{Pa}\", quantity: \"compressibility\" },\n    { factors: { meter: -2, kilogram: 1, second: -2 }, name: \"joule per square meter\", symbol: \"\\\\frac{J}{m^2}\", quantity: \"radiant exposure\" },\n    { factors: { meter: 2, kilogram: 1 }, name: \"kilogram square meter\", symbol: \"kg\\\\cdot m^2\", quantity: \"moment of inertia\" },\n    { factors: { meter: 2, kilogram: -1, second: -1 }, name: \"newton meter second per kilogram\", symbol: \"\\\\frac{N\\\\cdot m\\\\cdot s}{kg}\", quantity: \"specific angular momentum\" },\n    // Chemistry\n    { factors: { meter: -3, mole: 1 }, name: \"mole per cubic meter\", symbol: \"\\\\frac{mol}{m^3}\", quantity: \"molarity\" },\n    { factors: { meter: 3, mole: -1 }, name: \"cubic meter per mole\", symbol: \"\\\\frac{m^3}{mol}\", quantity: \"molar volume\" },\n    { factors: { meter: 2, kilogram: 1, second: -2, kelvin: -1, mole: -1 }, name: \"joule per kelvin mole\", symbol: \"\\\\frac{J}{K\\\\cdot mol}\", quantity: \"molar heat capacity\" },\n    { factors: { meter: 2, kilogram: 1, second: -2, mole: -1 }, name: \"joule per mole\", symbol: \"\\\\frac{J}{mol}\", quantity: \"molar energy\" },\n    { factors: { meter: 2, kilogram: -1, second: 3, ampere: 2, mole: -1 }, name: \"siemens square meter per mole\", symbol: \"\\\\frac{S\\\\cdot m^2}{mol}\", quantity: \"molar conductivity\" },\n    { factors: { kilogram: -1, mole: 1 }, name: \"mole per kilogram\", symbol: \"\\\\frac{mol}{kg}\", quantity: \"molality\" },\n    { factors: { kilogram: 1, mole: -1 }, name: \"kilogram per mole\", symbol: \"\\\\frac{kg}{mol}\", quantity: \"molar mass\" },\n    { factors: { meter: 3, second: -1, mole: -1 }, name: \"cubic meter per mole second\", symbol: \"\\\\frac{m^3}{mol\\\\cdot s}\", quantity: \"catalytic efficiency\" },\n    // Electromagnetics\n    { factors: { meter: -2, second: 1, ampere: 1 }, name: \"coulomb per square meter\", symbol: \"\\\\frac{C}{m^2}\", quantity: \"electric displacement field\" },\n    { factors: { meter: -3, second: 1, ampere: 1 }, name: \"coulomb per cubic meter\", symbol: \"\\\\frac{C}{m^3}\", quantity: \"electric charge density\" },\n    { factors: { meter: -2, ampere: 1 }, name: \"ampere per square meter\", symbol: \"\\\\frac{A}{m^2}\", quantity: \"electric current density\" },\n    { factors: { meter: -1, kilogram: -1, second: 3, ampere: 2 }, name: \"siemens per meter\", symbol: \"\\\\frac{S}{m}\", quantity: \"electrical conductivity\" },\n    { factors: { meter: -1, kilogram: -1, second: 4, ampere: 2 }, name: \"farad per meter\", symbol: \"\\\\frac{F}{m}\", quantity: \"permittivity\" },\n    { factors: { meter: 1, kilogram: 1, second: -2, ampere: -2 }, name: \"henry per meter\", symbol: \"\\\\frac{H}{m}\", quantity: \"magnetic permeability\" },\n    { factors: { meter: 1, kilogram: 1, second: -3, ampere: -1 }, name: \"volt per meter\", symbol: \"\\\\frac{V}{m}\", quantity: \"electric field strength\" },\n    { factors: { meter: -1, ampere: 1 }, name: \"ampere per meter\", symbol: \"\\\\frac{A}{m}\", quantity: \"magnetic field strength\" },\n    { factors: { kilogram: -1, second: 1, ampere: 1 }, name: \"coulomb per kilogram\", symbol: \"\\\\frac{C}{kg}\", quantity: \"exposure (X and gamma rays)\" },\n    { factors: { meter: 3, kilogram: 1, second: -3, ampere: -2 }, name: \"ohm meter\", symbol: \"\\\\Omega\\\\cdot m\", quantity: \"resistivity\" },\n    { factors: { meter: -1, second: 1, ampere: 1 }, name: \"coulomb per meter\", symbol: \"\\\\frac{C}{m}\", quantity: \"linear charge density\" },\n    { factors: { meter: 2, ampere: 1 }, name: \"joule per tesla\", symbol: \"\\\\frac{J}{T}\", quantity: \"magnetic dipole moment\" },\n    { factors: { meter: 2, volt: -1, second: -1 }, name: \"square meter per volt second\", symbol: \"\\\\frac{m^2}{V\\\\cdot s}\", quantity: \"electron mobility\" },\n    { factors: { meter: -2, kilogram: -1, second: 2, ampere: 2 }, name: \"reciprocal henry\", symbol: \"\\\\frac{1}{H}\", quantity: \"magnetic reluctance\" },\n    { factors: { meter: 1, kilogram: 1, second: -2, ampere: -1 }, name: \"weber per meter\", symbol: \"\\\\frac{Wb}{m}\", quantity: \"magnetic vector potential\" },\n    { factors: { meter: 1, kilogram: 1, second: -2, ampere: -1 }, name: \"weber meter\", symbol: \"Wb\\\\cdot m\", quantity: \"magnetic moment\" },\n    { factors: { meter: 1, kilogram: 1, second: -2, ampere: -1 }, name: \"tesla meter\", symbol: \"T\\\\cdot m\", quantity: \"magnetic rigidity\" },\n    { factors: { meter: -1, kilogram: -1, second: 2, ampere: 2 }, name: \"meter per henry\", symbol: \"\\\\frac{m}{H}\", quantity: \"magnetic susceptibility\" },\n    // Photometry\n    { factors: { second: 1, candela: 1 }, name: \"lumen second\", symbol: \"lm\\\\cdot s\", quantity: \"luminous energy\" },\n    { factors: { meter: -2, second: 1, candela: 1 }, name: \"lux second\", symbol: \"lx\\\\cdot s\", quantity: \"luminous exposure\" },\n    { factors: { meter: -2, candela: 1 }, name: \"candela per square meter\", symbol: \"\\\\frac{cd}{m^2}\", quantity: \"luminance\" },\n    { factors: { meter: -2, kilogram: -1, second: 3, candela: 1 }, name: \"lumen per watt\", symbol: \"\\\\frac{lm}{W}\", quantity: \"luminous efficacy\" },\n    // Thermodynamics\n    { factors: { meter: 2, kilogram: 1, second: -2, kelvin: -1 }, name: \"joule per kelvin\", symbol: \"\\\\frac{J}{K}\", quantity: \"heat capacity, entropy\" },\n    { factors: { meter: 2, kilogram: -1, second: -2, kelvin: -1 }, name: \"joule per kilogram kelvin\", symbol: \"\\\\frac{J}{K\\\\cdot kg}\", quantity: \"specific heat capacity, specific entropy\" },\n    { factors: { meter: 1, kilogram: 1, second: -3, kelvin: -1 }, name: \"watt per meter kelvin\", symbol: \"\\\\frac{W}{m\\\\cdot K}\", quantity: \"thermal conductivity\" },\n    { factors: { meter: -2, second: 3, kilogram: -1, kelvin: 1 }, name: \"kelvin per watt\", symbol: \"\\\\frac{K}{W}\", quantity: \"thermal resistance\" },\n    { factors: { kelvin: -1 }, name: \"reciprocal kelvin\", symbol: \"\\\\frac{1}{K}\", quantity: \"thermal expansion coefficient\" },\n    { factors: { meter: -1, kelvin: 1 }, name: \"kelvin per meter\", symbol: \"\\\\frac{K}{m}\", quantity: \"temperature gradient\" },\n    // Additional \"fun\" units\n    { factors: { meter: 2, factor: 10000 }, name: \"hectare\", symbol: \"ha\", nonSI: true },\n    { factors: { kilogram: 1, factor: 1000 }, name: \"tonne\", symbol: \"t\", nonSI: true },\n    { factors: { kilogram: 1, factor: 1e-3 }, name: \"gram\", symbol: \"g\", nonSI: true },\n    { factors: { meter: 3, factor: 1e-3 }, name: \"liter\", symbol: \"l\", quantity: \"volume\", nonSI: true },\n    { factors: { meter: 1, second: 2, factor: 1e-2 }, name: \"galileo\", symbol: \"Gal\", quantity: \"acceleration\", nonSI: true },\n    { factors: { meter: 1, kilogram: 1, second: -2, factor: 1e-5 }, name: \"dyne\", symbol: \"dyn\", quantity: \"force\", nonSI: true },\n    { factors: { meter: 2, kilogram: 1, second: -2, factor: 1e-7 }, name: \"erg\", symbol: \"erg\", quantity: \"energy\", nonSI: true },\n    { factors: { meter: -1, kilogram: 1, second: -1, factor: 0.1 }, name: \"poise\", symbol: \"P\", quantity: \"dynamic viscosity\", nonSI: true },\n    { factors: { meter: 2, second: -1, factor: 1e-4 }, name: \"stokes\", symbol: \"St\", quantity: \"kinematic viscosity\", nonSI: true },\n    { factors: { meter: -1, factor: 100 }, name: \"kayser\", symbol: \"K\", quantity: \"wavenumber\", nonSI: true },\n    { factors: { meter: 1, kilogram: 1, second: -2, ampere: -1, factor: 1e-4 }, name: \"gauss\", symbol: \"G\", quantity: \"magnetic flux density\", nonSI: true },\n    { factors: { meter: 1, kilogram: 1, second: -2, ampere: -1, factor: 1e-1 }, name: \"oersted\", symbol: \"Oe\", quantity: \"magnetizing field\", nonSI: true },\n    { factors: { meter: 2, kilogram: 1, second: -2, ampere: -1, factor: 1e-8 }, name: \"maxwell\", symbol: \"Mx\", quantity: \"magnetic flux\", nonSI: true },\n    { factors: { meter: -2, candela: 1, factor: 1e4 }, name: \"stilb\", symbol: \"sb\", quantity: \"luminance\", nonSI: true },\n    { factors: { meter: -2, candela: 1, factor: 1e4 / Math.PI }, name: \"lambert\", symbol: \"L_{\\\\pi}\", quantity: \"luminance\", nonSI: true },\n    { factors: { meter: -2, candela: 1, factor: 1e4 }, name: \"phot\", symbol: \"ph\", quantity: \"illuminance\", nonSI: true },\n    { factors: { second: 1, factor: 60 }, name: \"minute\", symbol: \"min\", quantity: \"time\", nonSI: true },\n    { factors: { second: 1, factor: 3600 }, name: \"hour\", symbol: \"h\", quantity: \"time\", nonSI: true },\n    { factors: { second: 1, factor: 86400 }, name: \"day\", symbol: \"d\", quantity: \"time\", nonSI: true },\n    { factors: { second: 1, factor: 604800 }, name: \"week\", symbol: \"wk\", quantity: \"time\", nonSI: true },\n    { factors: { second: 1, factor: 31557600 }, name: \"year\", symbol: \"a\", quantity: \"time\", nonSI: true },\n    { factors: { second: 1, factor: 31556952.0 }, name: \"Gregorian year\", symbol: \"a_{g}\", quantity: \"time\", nonSI: true },\n    { factors: { second: 1, factor: 31558149.8 }, name: \"sidereal year\", symbol: \"a_{s}\", quantity: \"time\", nonSI: true },\n    { factors: { second: 1, factor: 31556925.2 }, name: \"tropical year\", symbol: \"a_{t}\", quantity: \"time\", nonSI: true },\n    { factors: { second: 1, factor: 31558434.3 }, name: \"anomalistic year\", symbol: \"a_{A}\", quantity: \"time\", nonSI: true },\n    { factors: { second: 1, factor: 31558432.0 }, name: \"draconic year\", symbol: \"a_{D}\", quantity: \"time\", nonSI: true },\n    { factors: { second: 1, factor: 31556926.0 }, name: \"lunar year\", symbol: \"a_{L}\", quantity: \"time\", nonSI: true },\n    { factors: { second: 1, factor: 31558149.6 }, name: \"Gaussian year\", symbol: \"a_{G}\", quantity: \"time\", nonSI: true },\n    { factors: { second: 1, factor: 4.55e17 }, name: \"Hubble time\", symbol: \"t_{H}\", quantity: \"time\", nonSI: true },\n    // Constants (currently not possible to achieve, as factors can only be powers of 10)\n    /**\n    { factors: { meter: 2, kilogram: 1, second: -3, kelvin: -4, factor: 5.670373e-8 }, name: \"stefan-boltzmann constant\", symbol: \"\\\\sigma\", quantity: \"radiant flux density\" },\n    { factors: { meter: 2, kilogram: 1, second: -1, factor: 6.626070040e-34 }, name: \"Planck constant\", symbol: \"h\", quantity: \"action\" },\n    { factors: { meter: 2, kilogram: 1, second: -1, factor: 1.054571800e-34 }, name: \"Reduced Planck constant\", symbol: \"\\\\hbar\", quantity: \"action\" },\n    { factors: { meter: 2, kilogram: 1, second: -2, kelvin: -1, factor: 1.38064852e-23 }, name: \"Boltzmann constant\", symbol: \"k_B\", quantity: \"temperature\" },\n    { factors: { factor: 6.022140857e23 }, name: \"Avogadro constant\", symbol: \"N_A\", quantity: \"amount of substance\" },\n    { factors: { second: 1, ampere: 1, factor: 96485.33289 }, name: \"Faraday constant\", symbol: \"F\", quantity: \"electric charge\" },\n    { factors: { meter: 2, kilogram: 1, second: -2, kelvin: -1, mole: -1, factor: 8.3144598 }, name: \"Gas constant\", symbol: \"R\", quantity: \"temperature\" },\n    { factors: { meter: -1, factor: 10973731.568508 }, name: \"Rydberg constant\", symbol: \"R_\\\\infty\", quantity: \"wavenumber\" },\n    { factors: { meter: 1, factor: 5.2917721067e-11 }, name: \"Bohr radius\", symbol: \"a_0\", quantity: \"length\" },\n    { factors: { meter: 2, kilogram: 1, second: -2, ampere: -1, factor: 9.274009994e-24 }, name: \"Bohr magneton\", symbol: \"\\\\mu_B\", quantity: \"magnetic dipole moment\" },\n    { factors: { meter: 2, kilogram: 1, second: -2, ampere: -1, factor: 5.050783699e-27 }, name: \"Nuclear magneton\", symbol: \"\\\\mu_N\", quantity: \"magnetic dipole moment\" },\n    { factors: { kilogram: 1, factor: 9.10938356e-31 }, name: \"Electron mass\", symbol: \"m_e\", quantity: \"mass\" },\n    { factors: { kilogram: 1, factor: 1.672621898e-27 }, name: \"Proton mass\", symbol: \"m_p\", quantity: \"mass\" },\n    { factors: { kilogram: 1, factor: 1.674927471e-27 }, name: \"Neutron mass\", symbol: \"m_n\", quantity: \"mass\" },\n    { factors: { meter: 2, kilogram: 1, second: -2, factor: 1.6021766208e-19 }, name: \"Electron volt\", symbol: \"eV\", quantity: \"energy\" },\n    { factors: { kilogram: 1, factor: 1.660539040e-27 }, name: \"Atomic mass unit\", symbol: \"u\", quantity: \"mass\" },\n    { factors: { kilogram: 1, factor: 1.660539040e-27 }, name: \"Dalton\", symbol: \"Da\", quantity: \"mass\" },\n    { factors: { meter: 2, kilogram: 1, second: -2, ampere: -1, factor: 1.6021766208e-19 }, name: \"Electron charge\", symbol: \"e\", quantity: \"electric charge\" },\n    { factors: { meter: 2, kilogram: 1, second: -2, ampere: -1, factor: 1.6021766208e-19 }, name: \"Elementary charge\", symbol: \"e\", quantity: \"electric charge\" },\n    { factors: { meter: 1, second: -1, factor: 299792458 }, name: \"Speed of light in vacuum\", symbol: \"c\", quantity: \"speed\" },\n    { factors: { meter: 3, kilogram: -1, second: -2, factor: 6.67408e-11 }, name: \"Gravitational constant\", symbol: \"G\", quantity: \"gravitational constant\" },\n    { factors: { meter: 1, second: -2, factor: 9.80665 }, name: \"Standard acceleration due to gravity\", symbol: \"g_n\", quantity: \"acceleration\" },\n    { factors: { meter: 1, factor: 1.616229e-35 }, name: \"Planck length\", symbol: \"l_P\", quantity: \"length\" },\n    { factors: { kilogram: 1, factor: 2.176470e-8 }, name: \"Planck mass\", symbol: \"m_P\", quantity: \"mass\" },\n    { factors: { second: 1, factor: 5.39116e-44 }, name: \"Planck time\", symbol: \"t_P\", quantity: \"time\" },\n    { factors: { kelvin: 1, factor: 1.416808e32 }, name: \"Planck temperature\", symbol: \"T_P\", quantity: \"temperature\" },\n    { factors: { meter: 2, kilogram: 1, second: -2, ampere: -1, factor: 5.291772e-19 }, name: \"Planck charge\", symbol: \"q_P\", quantity: \"electric charge\" },\n    { factors: { meter: 2, kilogram: 1, second: -2, factor: 1.9561e9 }, name: \"Planck energy\", symbol: \"E_P\", quantity: \"energy\" },\n    { factors: { meter: 1, kilogram: 1, second: -2, factor: 1.21027e44 }, name: \"Planck force\", symbol: \"F_P\", quantity: \"force\" },\n    { factors: { meter: 2, kilogram: 1, second: -3, factor: 3.62831e52 }, name: \"Planck power\", symbol: \"P_P\", quantity: \"power\" },\n    { factors: { meter: 2, factor: 2.61231e-70 }, name: \"Planck area\", symbol: \"A_P\", quantity: \"area\" },\n    { factors: { meter: 3, factor: 4.2217e-105 }, name: \"Planck volume\", symbol: \"V_P\", quantity: \"volume\" },\n    { factors: { kilogram: 1, meter: -3, factor: 5.1550e96 }, name: \"Planck density\", symbol: \"\\\\rho_P\", quantity: \"density\" },\n    { factors: { kilogram: 1, meter: -1, second: -2, factor: 5.1550e96 }, name: \"Planck energy density\", symbol: \"\\\\rho_P\", quantity: \"energy density\" },\n    { factors: { kilogram: 1, meter: -1, second: -2, factor: 4.63309e113 }, name: \"Planck pressure\", symbol: \"P_P\", quantity: \"pressure\" },\n    { factors: { second: -1, factor: 1.85487e43 }, name: \"Planck frequency\", symbol: \"\\\\nu_P\", quantity: \"frequency\" },\n    { factors: { meter: 1, kilogram: 1, second: -1, factor: 6.52413e-24 }, name: \"Planck momentum\", symbol: \"p_P\", quantity: \"momentum\" },\n    { factors: { meter: 2, kilogram: 1, second: -3, factor: 3.62831e52 }, name: \"Planck power\", symbol: \"P_P\", quantity: \"power\" },\n    **/\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/compositions.ts\n");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui */ \"./src/ui.ts\");\n\nconst ui = new _ui__WEBPACK_IMPORTED_MODULE_0__.UI();\nwindow.ui = ui;\nwindow.ui.init();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXgudHMiLCJtYXBwaW5ncyI6Ijs7QUFBMEI7QUFDMUIsZUFBZSxtQ0FBRTtBQUNqQjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWV0cmljLW1lbGQvLi9zcmMvaW5kZXgudHM/ZTk0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBVSSB9IGZyb20gXCIuL3VpXCI7XG5jb25zdCB1aSA9IG5ldyBVSSgpO1xud2luZG93LnVpID0gdWk7XG53aW5kb3cudWkuaW5pdCgpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.ts\n");

/***/ }),

/***/ "./src/library.ts":
/*!************************!*\
  !*** ./src/library.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Library: () => (/* binding */ Library)\n/* harmony export */ });\n/* harmony import */ var _compositions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./compositions */ \"./src/compositions.ts\");\n/* harmony import */ var _units__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./units */ \"./src/units.ts\");\n\n\nclass Library {\n    constructor() {\n        this.baseUnits = _compositions__WEBPACK_IMPORTED_MODULE_0__.baseUnits.map(spec => _units__WEBPACK_IMPORTED_MODULE_1__.Unit.fromSpec(spec));\n        this.initialize();\n    }\n    getNextComposition() {\n        var _a;\n        let nextNotFound = (_a = this.notFoundUnits.values().next()) === null || _a === void 0 ? void 0 : _a.value;\n        if (nextNotFound != null && nextNotFound != undefined) {\n            return nextNotFound;\n        }\n    }\n    getNextCompositionHint() {\n        let nextNotFound = this.getNextComposition();\n        if (nextNotFound != null) {\n            return `Find a unit for <i>${nextNotFound.assignedQuantity}</i>.`;\n        }\n        return \"All units found!\";\n    }\n    getProgressHint() {\n        let foundCount = this.foundDerivedUnits.length;\n        let totalCount = this.allCompositions.filter(u => u.isSI).length;\n        return `${foundCount}/${totalCount} units found.`;\n    }\n    addFoundElement(unit) {\n        this.foundDerivedUnits.push(unit);\n        this.notFoundUnits.delete(unit.assignedName);\n        this.save();\n    }\n    isUnitFound(unit) {\n        return this.baseUnits.some((u) => u.equals(unit)) || this.foundDerivedUnits.some((u) => u.equals(unit));\n    }\n    save() {\n        localStorage.setItem(\"foundUnits\", JSON.stringify(this.foundDerivedUnits.map(u => u.toSpec())));\n    }\n    load() {\n        const foundUnitsLoaded = JSON.parse(localStorage.getItem(\"foundUnits\"));\n        if (foundUnitsLoaded != null) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            foundUnitsLoaded.forEach((unitSpec) => {\n                let unit = _units__WEBPACK_IMPORTED_MODULE_1__.Unit.fromSpec(unitSpec);\n                window.ui.addLibraryElement(unit);\n            });\n        }\n    }\n    initialize() {\n        this.foundDerivedUnits = [];\n        this.allCompositions = _compositions__WEBPACK_IMPORTED_MODULE_0__.compositions.map(spec => _units__WEBPACK_IMPORTED_MODULE_1__.Unit.fromSpec(spec));\n        this.notFoundUnits = new Map();\n        this.allCompositions.forEach(unit => this.notFoundUnits.set(unit.assignedName, unit));\n    }\n    resetProgress() {\n        this.initialize();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbGlicmFyeS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBeUQ7QUFDMUI7QUFDeEI7QUFDUDtBQUNBLHlCQUF5QixvREFBUyxhQUFhLHdDQUFJO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5Qyw4QkFBOEI7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFdBQVcsR0FBRyxZQUFZO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsd0NBQUk7QUFDL0I7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsdURBQVksYUFBYSx3Q0FBSTtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21ldHJpYy1tZWxkLy4vc3JjL2xpYnJhcnkudHM/MTI3OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBiYXNlVW5pdHMsIGNvbXBvc2l0aW9ucyB9IGZyb20gXCIuL2NvbXBvc2l0aW9uc1wiO1xuaW1wb3J0IHsgVW5pdCB9IGZyb20gXCIuL3VuaXRzXCI7XG5leHBvcnQgY2xhc3MgTGlicmFyeSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuYmFzZVVuaXRzID0gYmFzZVVuaXRzLm1hcChzcGVjID0+IFVuaXQuZnJvbVNwZWMoc3BlYykpO1xuICAgICAgICB0aGlzLmluaXRpYWxpemUoKTtcbiAgICB9XG4gICAgZ2V0TmV4dENvbXBvc2l0aW9uKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGxldCBuZXh0Tm90Rm91bmQgPSAoX2EgPSB0aGlzLm5vdEZvdW5kVW5pdHMudmFsdWVzKCkubmV4dCgpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudmFsdWU7XG4gICAgICAgIGlmIChuZXh0Tm90Rm91bmQgIT0gbnVsbCAmJiBuZXh0Tm90Rm91bmQgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dE5vdEZvdW5kO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldE5leHRDb21wb3NpdGlvbkhpbnQoKSB7XG4gICAgICAgIGxldCBuZXh0Tm90Rm91bmQgPSB0aGlzLmdldE5leHRDb21wb3NpdGlvbigpO1xuICAgICAgICBpZiAobmV4dE5vdEZvdW5kICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBgRmluZCBhIHVuaXQgZm9yIDxpPiR7bmV4dE5vdEZvdW5kLmFzc2lnbmVkUXVhbnRpdHl9PC9pPi5gO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBcIkFsbCB1bml0cyBmb3VuZCFcIjtcbiAgICB9XG4gICAgZ2V0UHJvZ3Jlc3NIaW50KCkge1xuICAgICAgICBsZXQgZm91bmRDb3VudCA9IHRoaXMuZm91bmREZXJpdmVkVW5pdHMubGVuZ3RoO1xuICAgICAgICBsZXQgdG90YWxDb3VudCA9IHRoaXMuYWxsQ29tcG9zaXRpb25zLmZpbHRlcih1ID0+IHUuaXNTSSkubGVuZ3RoO1xuICAgICAgICByZXR1cm4gYCR7Zm91bmRDb3VudH0vJHt0b3RhbENvdW50fSB1bml0cyBmb3VuZC5gO1xuICAgIH1cbiAgICBhZGRGb3VuZEVsZW1lbnQodW5pdCkge1xuICAgICAgICB0aGlzLmZvdW5kRGVyaXZlZFVuaXRzLnB1c2godW5pdCk7XG4gICAgICAgIHRoaXMubm90Rm91bmRVbml0cy5kZWxldGUodW5pdC5hc3NpZ25lZE5hbWUpO1xuICAgICAgICB0aGlzLnNhdmUoKTtcbiAgICB9XG4gICAgaXNVbml0Rm91bmQodW5pdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5iYXNlVW5pdHMuc29tZSgodSkgPT4gdS5lcXVhbHModW5pdCkpIHx8IHRoaXMuZm91bmREZXJpdmVkVW5pdHMuc29tZSgodSkgPT4gdS5lcXVhbHModW5pdCkpO1xuICAgIH1cbiAgICBzYXZlKCkge1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImZvdW5kVW5pdHNcIiwgSlNPTi5zdHJpbmdpZnkodGhpcy5mb3VuZERlcml2ZWRVbml0cy5tYXAodSA9PiB1LnRvU3BlYygpKSkpO1xuICAgIH1cbiAgICBsb2FkKCkge1xuICAgICAgICBjb25zdCBmb3VuZFVuaXRzTG9hZGVkID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImZvdW5kVW5pdHNcIikpO1xuICAgICAgICBpZiAoZm91bmRVbml0c0xvYWRlZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgZm91bmRVbml0c0xvYWRlZC5mb3JFYWNoKCh1bml0U3BlYykgPT4ge1xuICAgICAgICAgICAgICAgIGxldCB1bml0ID0gVW5pdC5mcm9tU3BlYyh1bml0U3BlYyk7XG4gICAgICAgICAgICAgICAgd2luZG93LnVpLmFkZExpYnJhcnlFbGVtZW50KHVuaXQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgdGhpcy5mb3VuZERlcml2ZWRVbml0cyA9IFtdO1xuICAgICAgICB0aGlzLmFsbENvbXBvc2l0aW9ucyA9IGNvbXBvc2l0aW9ucy5tYXAoc3BlYyA9PiBVbml0LmZyb21TcGVjKHNwZWMpKTtcbiAgICAgICAgdGhpcy5ub3RGb3VuZFVuaXRzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLmFsbENvbXBvc2l0aW9ucy5mb3JFYWNoKHVuaXQgPT4gdGhpcy5ub3RGb3VuZFVuaXRzLnNldCh1bml0LmFzc2lnbmVkTmFtZSwgdW5pdCkpO1xuICAgIH1cbiAgICByZXNldFByb2dyZXNzKCkge1xuICAgICAgICB0aGlzLmluaXRpYWxpemUoKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/library.ts\n");

/***/ }),

/***/ "./src/ui.ts":
/*!*******************!*\
  !*** ./src/ui.ts ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UI: () => (/* binding */ UI)\n/* harmony export */ });\n/* harmony import */ var _compositions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./compositions */ \"./src/compositions.ts\");\n/* harmony import */ var _library__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./library */ \"./src/library.ts\");\n/* harmony import */ var _units__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./units */ \"./src/units.ts\");\n\n\n\nclass WorkspaceElement {\n    constructor(inner, symbol, name) {\n        this.isLibraryElement = false;\n        this.inner = inner;\n        this.symbol = symbol;\n        this.name = name;\n    }\n    get acceptsMerge() {\n        return !this.isLibraryElement;\n    }\n    draw(root, childIndex = null) {\n        this.node = document.createElement(\"div\");\n        this.innerRect = document.createElement(\"div\");\n        this.node.classList.add(\"combinable\");\n        this.innerRect.classList.add(\"card\");\n        this.innerRect.classList.add(\"unit-inner\");\n        this.innerRect.onmouseenter = () => window.ui.updateHoverText(this.inner);\n        this.symbolElement = document.createElement(\"span\");\n        this.symbolElement.classList.add(\"symbol\");\n        this.symbolElement.innerText = this.symbol;\n        this.nameElement = document.createElement(\"span\");\n        this.nameElement.classList.add(\"name-label\");\n        this.nameElement.innerText = this.name;\n        this.innerRect.appendChild(this.symbolElement);\n        this.node.appendChild(this.innerRect);\n        this.node.appendChild(this.nameElement);\n        if (childIndex != null) {\n            root.insertBefore(this.node, root.children[childIndex]);\n        }\n        else {\n            root.appendChild(this.node);\n        }\n        this.initializeDragging(this.node);\n    }\n    mergeWith(otherElement) {\n        if (otherElement.inner.isUnit && this.inner.isUnit) {\n            const newUnit = (0,_units__WEBPACK_IMPORTED_MODULE_2__.combineUnits)(otherElement.inner, this.inner);\n            this.inner = newUnit;\n            this.name = newUnit.getName();\n            this.symbol = newUnit.getSymbol();\n            this.isLibraryElement = false;\n            otherElement.consume();\n        }\n        if (!otherElement.inner.isUnit && this.inner.isUnit) {\n            const newUnit = this.inner.inverse();\n            this.inner = newUnit;\n            const match = newUnit.findExactCompositionMatch();\n            if (match != null) {\n                newUnit.applyProperties(match);\n            }\n            this.name = newUnit.getName();\n            this.symbol = newUnit.getSymbol();\n            this.isLibraryElement = false;\n            otherElement.consume();\n        }\n        if (otherElement.inner.isUnit && !this.inner.isUnit) {\n            otherElement.mergeWith(this);\n        }\n        this.redraw();\n    }\n    redraw() {\n        this.nameElement.innerText = this.name;\n        this.symbolElement.innerText = `$$${this.symbol}$$`;\n        this.innerRect.classList.remove(\"unit-inner-base\");\n        this.innerRect.classList.remove(\"unit-inner-inverse\");\n        this.innerRect.classList.remove(\"unit-inner-combined-named\");\n        this.innerRect.classList.remove(\"unit-inner-combined-defined\");\n        this.innerRect.classList.remove(\"unit-inner-combined-custom\");\n        this.node.classList.remove(\"merge-highlight\");\n        if (this.inner.isUnit) {\n            let unit = this.inner;\n            if (unit.isBase) {\n                this.innerRect.classList.add(\"unit-inner-base\");\n            }\n            else if (unit.isSpeciallyNamed) {\n                this.innerRect.classList.add(\"unit-inner-combined-named\");\n            }\n            else if (unit.isPredefinedComposition) {\n                this.innerRect.classList.add(\"unit-inner-combined-defined\");\n            }\n            else {\n                this.innerRect.classList.add(\"unit-inner-combined-custom\");\n            }\n        }\n        else {\n            this.innerRect.classList.add(\"unit-inner-inverse\");\n        }\n        if (this.isLibraryElement) {\n            this.node.classList.add(\"in-library\");\n        }\n        else {\n            this.node.classList.remove(\"in-library\");\n            /*if (this.node.parentElement.id == \"lib\") {\n                this.node.remove();\n                document.getElementById(\"workspace\").appendChild(this.node);\n            }*/\n        }\n        window.ui.redrawFormulas([this.node]);\n    }\n    consume() {\n        this.node.remove();\n        window.ui.elements = window.ui.elements.filter(e => e != this);\n    }\n    clone() {\n        // new element takes the place of the current element, so that the drag can continue on the current element\n        const newElement = new WorkspaceElement(this.inner.clone(), this.symbol, this.name);\n        const thisElementChildIndex = Array.from(this.node.parentNode.children).indexOf(this.node);\n        newElement.draw(document.getElementById(\"units-repo\"), thisElementChildIndex);\n        newElement.node.style.left = this.node.style.left;\n        newElement.node.style.top = this.node.style.top;\n        window.ui.elements.unshift(newElement);\n        newElement.isLibraryElement = this.isLibraryElement;\n        newElement.redraw();\n        return newElement;\n    }\n    initializeDragging(node) {\n        let xOffset = 0, yOffset = 0, initialX = 0, initialY = 0;\n        node.onmousedown = (e) => dragMouseDown(e);\n        node.onclick = null;\n        node.classList.add(\"grabbable\");\n        let originalTop = 0;\n        let originalLeft = 0;\n        const thisElement = this; //FIXME\n        function dragMouseDown(e) {\n            e = e || window.event;\n            e.preventDefault();\n            initialX = e.clientX;\n            initialY = e.clientY;\n            document.onmouseup = (e) => closeDragElement(e);\n            document.onmousemove = (e) => elementDrag(e);\n            originalTop = node.offsetTop;\n            originalLeft = node.offsetLeft;\n            node.style.zIndex = (WorkspaceElement.zIndexCounter++).toString();\n        }\n        let mergePartner = null;\n        function elementDrag(e) {\n            if (thisElement.isLibraryElement) {\n                // Duplicate this element and continue dragging this one\n                const newElement = thisElement.clone();\n                thisElement.isLibraryElement = false; // So we can merge this one.\n                thisElement.redraw();\n                newElement.redraw();\n                thisElement.node.style.top = newElement.node.getBoundingClientRect().top - yOffset + \"px\";\n                thisElement.node.style.left = newElement.node.offsetLeft - xOffset + \"px\";\n            }\n            node.classList.add(\"grabbing\");\n            e = e || window.event;\n            e.preventDefault();\n            xOffset = initialX - e.clientX;\n            yOffset = initialY - e.clientY;\n            initialX = e.clientX;\n            initialY = e.clientY;\n            node.style.top = node.offsetTop - yOffset + \"px\";\n            node.style.left = node.offsetLeft - xOffset + \"px\";\n            const closestElement = [...window.ui.elements]\n                .filter((element) => element != thisElement)\n                .map((element) => {\n                return { elem: element, dist: element.distanceTo(thisElement) };\n            })\n                .sort((a, b) => a.dist - b.dist)[0];\n            const distanceThreshold = 15;\n            if (closestElement.dist <= distanceThreshold && closestElement.elem.acceptsMerge) {\n                node.classList.add(\"merge-highlight\");\n                mergePartner = closestElement;\n            }\n            else {\n                node.classList.remove(\"merge-highlight\");\n                mergePartner = null;\n            }\n        }\n        function closeDragElement(e) {\n            document.onmouseup = null;\n            document.onmousemove = null;\n            e.preventDefault();\n            node.classList.remove(\"grabbing\");\n            if (mergePartner) {\n                // Do merge!\n                thisElement.mergeWith(mergePartner.elem);\n                mergePartner = null;\n            }\n            if (node.offsetTop == originalTop && node.offsetLeft == originalLeft) {\n                // console.log(\"No drag\")\n                // No drag has happened\n            }\n            let boundingRect = node.getBoundingClientRect();\n            let repoBoundingRect = document.getElementById(\"units-repo\").getBoundingClientRect();\n            if (boundingRect.top > repoBoundingRect.top && boundingRect.left > repoBoundingRect.left) {\n                // Delete unit if dropped on library\n                thisElement.consume();\n            }\n        }\n    }\n    get position() {\n        const { top, left, width, height } = this.innerRect.getBoundingClientRect();\n        return {\n            x: left + width / 2,\n            y: top + height / 2,\n        };\n    }\n    distanceTo(otherElement) {\n        const a = this.position;\n        const b = otherElement.position;\n        return Math.hypot(a.x - b.x, a.y - b.y);\n    }\n}\nWorkspaceElement.zIndexCounter = 0;\nclass UI {\n    constructor() {\n        this.currentlyHovered = null;\n        this.elements = [];\n        this.library = new _library__WEBPACK_IMPORTED_MODULE_1__.Library();\n    }\n    init(loadFromLocalStorage = true) {\n        _compositions__WEBPACK_IMPORTED_MODULE_0__.baseUnits.forEach((baseUnit) => {\n            const unit = _units__WEBPACK_IMPORTED_MODULE_2__.Unit.fromSpec(baseUnit);\n            this.library.baseUnits.push(unit);\n            const we = new WorkspaceElement(unit, baseUnit.symbol, baseUnit.name);\n            we.isLibraryElement = true;\n            this.elements.push(we);\n        });\n        const inverseElement = new WorkspaceElement(new _units__WEBPACK_IMPORTED_MODULE_2__.Inverse(), \"\\\\frac{1}{x}\", \"Inverse\");\n        inverseElement.isLibraryElement = true;\n        this.elements.push(inverseElement);\n        const initRoot = document.getElementById(\"units-repo\");\n        this.elements.forEach((element) => {\n            element.draw(initRoot);\n        });\n        if (loadFromLocalStorage) {\n            window.ui.library.load();\n        }\n        setTimeout(() => this.elements.forEach((element) => element.redraw()), 50);\n        this.updateText();\n    }\n    libraryContains(unit) {\n        return this.library.isUnitFound(unit);\n    }\n    addLibraryElement(unit) {\n        const we = new WorkspaceElement(unit, unit.getSymbol(), unit.getName());\n        we.isLibraryElement = true;\n        this.elements.push(we);\n        this.library.addFoundElement(unit);\n        we.draw(document.getElementById(\"units-repo\"));\n        we.redraw();\n        this.updateText();\n    }\n    updateText() {\n        document.getElementById(\"next-unit\").innerHTML = this.library.getNextCompositionHint();\n        document.getElementById(\"progress-indicator\").innerHTML = this.library.getProgressHint();\n    }\n    updateHoverText(hovered) {\n        if (this.currentlyHovered == hovered)\n            return;\n        this.currentlyHovered = hovered;\n        document.getElementById(\"element-info\").innerHTML = hovered.getHoverHint();\n        this.redrawFormulas([document.getElementById(\"element-info\")]);\n    }\n    redrawFormulas(elements = []) {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        if (MathJax) {\n            if (elements.length != 0) {\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                MathJax.typesetPromise(elements);\n            }\n            else {\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                MathJax.typesetPromise();\n            }\n        }\n    }\n    resetProgress() {\n        this.library.resetProgress();\n        document.getElementById(\"units-repo\").innerText = \"\";\n        this.elements = [];\n        this.init(false);\n        this.updateText();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/ui.ts\n");

/***/ }),

/***/ "./src/units.ts":
/*!**********************!*\
  !*** ./src/units.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Inverse: () => (/* binding */ Inverse),\n/* harmony export */   Unit: () => (/* binding */ Unit),\n/* harmony export */   combineUnits: () => (/* binding */ combineUnits)\n/* harmony export */ });\nclass Unit {\n    constructor(second, meter, kilogram, ampere, kelvin, mole, candela, factor) {\n        this.isPredefinedComposition = false;\n        this.assignedName = null;\n        this.assignedSymbol = null;\n        this.assignedQuantity = null;\n        this.isSpeciallyNamed = false;\n        this.isSI = true;\n        // SI-base exponents\n        this.second = second;\n        this.meter = meter;\n        this.kilogram = kilogram;\n        this.ampere = ampere;\n        this.kelvin = kelvin;\n        this.mole = mole;\n        this.candela = candela;\n        this.factor = factor;\n    }\n    get isBase() {\n        // exactly one of the base units is one\n        return this.getKeyedUnits().filter(u => u.value == 1).length == 1 && this.getKeyedUnits().filter(u => u.value == 0).length == 6 && this.factor == 1;\n    }\n    equals(other) {\n        return (this.second == other.second &&\n            this.meter == other.meter &&\n            this.kilogram == other.kilogram &&\n            this.ampere == other.ampere &&\n            this.kelvin == other.kelvin &&\n            this.mole == other.mole &&\n            this.candela == other.candela &&\n            this.factor == other.factor);\n    }\n    getKeyedUnits() {\n        return [\n            // Order is arranged to make names sound more natural (e.g. \"ampere meter\" instead of \"meter ampere\")\n            { key: \"kg\", value: this.kilogram, name: \"kilogram\" },\n            { key: \"A\", value: this.ampere, name: \"ampere\" },\n            { key: \"K\", value: this.kelvin, name: \"kelvin\" },\n            { key: \"mol\", value: this.mole, name: \"mole\" },\n            { key: \"cd\", value: this.candela, name: \"candela\" },\n            { key: \"m\", value: this.meter, name: \"meter\" },\n            { key: \"s\", value: this.second, name: \"second\" },\n        ];\n    }\n    getPowerName(power, name) {\n        if (power == 0)\n            return \"\";\n        if (power == 1)\n            return name;\n        if (power == 2)\n            return `square ${name}`;\n        if (power == 3)\n            return `cubic ${name}`;\n        return `${name}^${power}`;\n    }\n    getName() {\n        if (this.assignedName != null) {\n            return this.assignedName;\n        }\n        const units = this.getKeyedUnits().filter(u => u.value != 0);\n        const negativeUnits = units.filter(u => u.value < 0);\n        const positiveUnits = units.filter(u => u.value > 0);\n        const positivePart = positiveUnits.map(u => this.getPowerName(Math.abs(u.value), u.name));\n        const negativePart = negativeUnits.map(u => this.getPowerName(Math.abs(u.value), u.name));\n        let name = positivePart.join(\" \");\n        if (negativePart.length > 0) {\n            if (positivePart.length == 0) {\n                name = \"inverse \" + negativePart.join(\" \");\n            }\n            else {\n                name += \" per \" + negativePart.join(\" \");\n            }\n        }\n        return [this.getFactorName(), name].join(\" \");\n    }\n    getFactorName() {\n        const factor = this.factor;\n        if (factor == 1)\n            return \"\";\n        if (factor == 1e30)\n            return \"quetta\";\n        if (factor == 1e27)\n            return \"ronna\";\n        if (factor == 1e24)\n            return \"yotta\";\n        if (factor == 1e21)\n            return \"zetta\";\n        if (factor == 1e18)\n            return \"exa\";\n        if (factor == 1e15)\n            return \"peta\";\n        if (factor == 1e12)\n            return \"tera\";\n        if (factor == 1e9)\n            return \"giga\";\n        if (factor == 1e6)\n            return \"mega\";\n        if (factor == 1e3)\n            return \"kilo\";\n        if (factor == 1e2)\n            return \"hecto\";\n        if (factor == 10)\n            return \"deca\";\n        if (factor == 1e-1)\n            return \"deci\";\n        if (factor == 1e-2)\n            return \"centi\";\n        if (factor == 1e-3)\n            return \"milli\";\n        if (factor == 1e-6)\n            return \"micro\";\n        if (factor == 1e-9)\n            return \"nano\";\n        if (factor == 1e-12)\n            return \"pico\";\n        if (factor == 1e-15)\n            return \"femto\";\n        if (factor == 1e-18)\n            return \"atto\";\n        if (factor == 1e-21)\n            return \"zepto\";\n        if (factor == 1e-24)\n            return \"yocto\";\n        if (factor == 1e-27)\n            return \"ronto\";\n        if (factor == 1e-30)\n            return \"quecto\";\n        return this.factor;\n    }\n    getFactorSymbol() {\n        if (this.factor == 1)\n            return \"\";\n        if (this.factor == 1e30)\n            return \"Q\";\n        if (this.factor == 1e27)\n            return \"R\";\n        if (this.factor == 1e24)\n            return \"Y\";\n        if (this.factor == 1e21)\n            return \"Z\";\n        if (this.factor == 1e18)\n            return \"E\";\n        if (this.factor == 1e15)\n            return \"P\";\n        if (this.factor == 1e12)\n            return \"T\";\n        if (this.factor == 1e9)\n            return \"G\";\n        if (this.factor == 1e6)\n            return \"M\";\n        if (this.factor == 1e3)\n            return \"k\";\n        if (this.factor == 1e2)\n            return \"h\";\n        if (this.factor == 10)\n            return \"da\";\n        if (this.factor == 1e-1)\n            return \"d\";\n        if (this.factor == 1e-2)\n            return \"c\";\n        if (this.factor == 1e-3)\n            return \"m\";\n        if (this.factor == 1e-6)\n            return \"Âµ\";\n        if (this.factor == 1e-9)\n            return \"n\";\n        if (this.factor == 1e-12)\n            return \"p\";\n        if (this.factor == 1e-15)\n            return \"f\";\n        if (this.factor == 1e-18)\n            return \"a\";\n        if (this.factor == 1e-21)\n            return \"z\";\n        if (this.factor == 1e-24)\n            return \"y\";\n        if (this.factor == 1e-27)\n            return \"r\";\n        if (this.factor == 1e-30)\n            return \"q\";\n        return \"\";\n    }\n    findExactCompositionMatch() {\n        /*\n        Find the exact composition that matches this unit.\n        */\n        for (const unit of window.ui.library.allCompositions) {\n            if (unit.equals(this)) {\n                this.isPredefinedComposition = true;\n                return unit;\n            }\n        }\n        return null;\n    }\n    applyProperties(unit) {\n        this.assignedName = unit.assignedName;\n        this.assignedSymbol = unit.assignedSymbol;\n        this.assignedQuantity = unit.assignedQuantity;\n        this.isPredefinedComposition = unit.isPredefinedComposition;\n        this.isSI = unit.isSI;\n        this.isSpeciallyNamed = unit.isSpeciallyNamed;\n    }\n    getSymbol() {\n        if (this.assignedSymbol != null) {\n            return this.assignedSymbol;\n        }\n        const units = this.getKeyedUnits().filter(u => u.value != 0);\n        const negativeUnits = units.filter(u => u.value < 0);\n        const positiveUnits = units.filter(u => u.value > 0);\n        const positivePart = positiveUnits.map(u => u.key + (u.value != 1 ? `^${u.value}` : \"\"));\n        const negativePart = negativeUnits.map(u => u.key + (u.value != -1 ? `^${-u.value}` : \"\"));\n        // put factor in front\n        if (this.factor != 1) {\n            positivePart.unshift(this.getFactorSymbol());\n        }\n        let name = positivePart.join(\"\");\n        if (negativePart.length > 0) {\n            if (positivePart.length == 0) {\n                name = \"1\";\n            }\n            name = `\\\\frac{${name}}{${negativePart.join(\"\")}}`;\n        }\n        return name;\n    }\n    get isUnit() { return true; }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static fromSpec(spec) {\n        const newUnit = new Unit(spec.factors.second || 0, spec.factors.meter || 0, spec.factors.kilogram || 0, spec.factors.ampere || 0, spec.factors.kelvin || 0, spec.factors.mole || 0, spec.factors.candela || 0, spec.factors.factor || 1);\n        newUnit.assignedName = spec.name;\n        newUnit.assignedSymbol = spec.symbol;\n        newUnit.assignedQuantity = spec.quantity;\n        newUnit.isSpeciallyNamed = spec.specialNamed || false;\n        newUnit.isSI = !spec.nonSI;\n        newUnit.isPredefinedComposition = true;\n        return newUnit;\n    }\n    index(i) {\n        switch (i) {\n            case 0: return this.second;\n            case 1: return this.meter;\n            case 2: return this.kilogram;\n            case 3: return this.ampere;\n            case 4: return this.kelvin;\n            case 5: return this.mole;\n            case 6: return this.candela;\n            case 7: return this.factor;\n        }\n    }\n    inverse() {\n        const newUnit = new Unit(-this.second, -this.meter, -this.kilogram, -this.ampere, -this.kelvin, -this.mole, -this.candela, 1 / this.factor);\n        const match = newUnit.findExactCompositionMatch();\n        if (match != null) {\n            newUnit.applyProperties(match);\n        }\n        if (!window.ui.libraryContains(newUnit) && newUnit.isPredefinedComposition) {\n            window.ui.addLibraryElement(newUnit);\n        }\n        return newUnit;\n    }\n    getHoverHint() {\n        let quantityString = this.assignedQuantity != null ? `- A unit for ${this.assignedQuantity}. ` : \"\";\n        let baseString = this.isBase ? \"This is a base unit. \" : \"\";\n        let nameString = this.isSpeciallyNamed ? \"This unit is a specially named derived unit.\" : \"\";\n        return `\\\\(${this.getSymbol()}\\\\) : ${this.getName()} ${quantityString}${baseString}${nameString}$$s^{${this.second}}m^{${this.meter}}kg^{${this.kilogram}}A^{${this.ampere}}K^{${this.kelvin}}mol^{${this.mole}}cd^{${this.candela}}\\\\cdot${this.factor}$$`;\n    }\n    clone() {\n        const newUnit = new Unit(this.second, this.meter, this.kilogram, this.ampere, this.kelvin, this.mole, this.candela, this.factor);\n        newUnit.applyProperties(this);\n        return newUnit;\n    }\n    toSpec() {\n        return {\n            factors: {\n                second: this.second,\n                meter: this.meter,\n                kilogram: this.kilogram,\n                ampere: this.ampere,\n                kelvin: this.kelvin,\n                mole: this.mole,\n                candela: this.candela,\n                factor: this.factor,\n            },\n            name: this.assignedName,\n            symbol: this.assignedSymbol,\n            quantity: this.assignedQuantity,\n            specialNamed: this.isSpeciallyNamed,\n            nonSI: !this.isSI,\n        };\n    }\n}\nclass Inverse {\n    get isUnit() { return false; }\n    equals(other) {\n        return other instanceof Inverse;\n    }\n    getHoverHint() {\n        return \"Use inverse to get the reciprocal of another unit.\";\n    }\n    getName() {\n        return \"Inverse\";\n    }\n    clone() {\n        return new Inverse();\n    }\n}\nfunction combineUnits(u1, u2) {\n    const newUnit = new Unit(u1.second + u2.second, u1.meter + u2.meter, u1.kilogram + u2.kilogram, u1.ampere + u2.ampere, u1.kelvin + u2.kelvin, u1.mole + u2.mole, u1.candela + u2.candela, u1.factor * u2.factor);\n    const match = newUnit.findExactCompositionMatch();\n    if (match != null) {\n        newUnit.applyProperties(match);\n    }\n    if (!window.ui.libraryContains(newUnit) && newUnit.isPredefinedComposition) {\n        window.ui.addLibraryElement(newUnit);\n    }\n    return newUnit;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/units.ts\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.ts");
/******/ 	var __webpack_exports__ = __webpack_require__("./css/custom.css");
/******/ 	
/******/ })()
;